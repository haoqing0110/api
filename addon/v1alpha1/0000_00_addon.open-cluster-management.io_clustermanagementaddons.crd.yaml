apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: clustermanagementaddons.addon.open-cluster-management.io
spec:
  group: addon.open-cluster-management.io
  names:
    kind: ClusterManagementAddOn
    listKind: ClusterManagementAddOnList
    plural: clustermanagementaddons
    singular: clustermanagementaddon
  scope: Cluster
  preserveUnknownFields: false
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.addOnMeta.displayName
          name: DISPLAY NAME
          type: string
        - jsonPath: .spec.addOnConfiguration.crdName
          name: CRD NAME
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ClusterManagementAddOn represents the registration of an add-on to the cluster manager. This resource allows the user to discover which add-on is available for the cluster manager and also provides metadata information about the add-on. This resource also provides a linkage to ManagedClusterAddOn, the name of the ClusterManagementAddOn resource will be used for the namespace-scoped ManagedClusterAddOn resource. ClusterManagementAddOn is a cluster-scoped resource.
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: spec represents a desired configuration for the agent on the cluster management add-on.
              type: object
              properties:
                addOnConfiguration:
                  description: 'Deprecated: Use supportedConfigs filed instead addOnConfiguration is a reference to configuration information for the add-on. In scenario where a multiple add-ons share the same add-on CRD, multiple ClusterManagementAddOn resources need to be created and reference the same AddOnConfiguration.'
                  type: object
                  properties:
                    crName:
                      description: crName is the name of the CR used to configure instances of the managed add-on. This field should be configured if add-on CR have a consistent name across the all of the ManagedCluster instaces.
                      type: string
                    crdName:
                      description: crdName is the name of the CRD used to configure instances of the managed add-on. This field should be configured if the add-on have a CRD that controls the configuration of the add-on.
                      type: string
                    lastObservedGeneration:
                      description: lastObservedGeneration is the observed generation of the custom resource for the configuration of the addon.
                      type: integer
                      format: int64
                addOnMeta:
                  description: addOnMeta is a reference to the metadata information for the add-on.
                  type: object
                  properties:
                    description:
                      description: description represents the detailed description of the add-on.
                      type: string
                    displayName:
                      description: displayName represents the name of add-on that will be displayed.
                      type: string
                defaultConfigs:
                  description: defaultConfigs represents a list of default add-on configurations. In scenario where all add-ons have the same configuration. User can override the default configuration by defining the configs in the install strategy for specific clusters.
                  type: array
                  items:
                    type: object
                    required:
                      - name
                      - resource
                    properties:
                      group:
                        description: group of the add-on configuration.
                        type: string
                        default: ""
                      name:
                        description: name of the add-on configuration.
                        type: string
                        minLength: 1
                      namespace:
                        description: namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.
                        type: string
                      resource:
                        description: resource of the add-on configuration.
                        type: string
                        minLength: 1
                installStrategy:
                  description: InstallStrategy represents the install strategy of the add-on.
                  type: object
                  properties:
                    placements:
                      description: Placements is a list of placement references honored when install strategy type is Placements. All clusters selected by these placements will install the addon If one cluster belongs to multiple placements, it will only apply the strategy defined later in the order. That is to say, The latter strategy overrides the previous one.
                      type: array
                      items:
                        type: object
                        required:
                          - name
                          - namespace
                        properties:
                          configs:
                            description: Configs is the configuration of managedClusterAddon during installation. User can override the configuration by updating the managedClusterAddon directly.
                            type: array
                            items:
                              type: object
                              required:
                                - name
                                - resource
                              properties:
                                group:
                                  description: group of the add-on configuration.
                                  type: string
                                  default: ""
                                name:
                                  description: name of the add-on configuration.
                                  type: string
                                  minLength: 1
                                namespace:
                                  description: namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.
                                  type: string
                                resource:
                                  description: resource of the add-on configuration.
                                  type: string
                                  minLength: 1
                          name:
                            description: Name of the placement
                            type: string
                          namespace:
                            description: Namespace of the placement
                            type: string
                          rolloutStrategy:
                            description: The rollout strategy to apply addon configurations change. The rollout strategy only watches the addon configurations defined in ClusterManagementAddOn.
                            type: object
                            properties:
                              rollingUpdate:
                                description: Rolling update with placement config params. Present only if the type is RollingUpdate.
                                type: object
                                properties:
                                  maxConcurrentlyUpdating:
                                    description: 'The maximum concurrently updating number of addons. Value can be an absolute number (ex: 5) or a percentage of desired addons (ex: 10%). Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, once the addon configs change, the addon on 30% of the selected clusters will adopt the new configs. When the addons with new configs are healthy, the addon on the remaining clusters will be further updated.'
                                    default: 25%
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    x-kubernetes-int-or-string: true
                              rollingUpdateWithCanary:
                                description: Rolling update with placement config params. Present only if the type is RollingUpdateWithCanary.
                                type: object
                                required:
                                  - placement
                                properties:
                                  maxConcurrentlyUpdating:
                                    description: 'The maximum concurrently updating number of addons. Value can be an absolute number (ex: 5) or a percentage of desired addons (ex: 10%). Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, once the addon configs change, the addon on 30% of the selected clusters will adopt the new configs. When the addons with new configs are healthy, the addon on the remaining clusters will be further updated.'
                                    default: 25%
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    x-kubernetes-int-or-string: true
                                  placement:
                                    description: Canary placement reference.
                                    type: object
                                    required:
                                      - name
                                      - namespace
                                    properties:
                                      name:
                                        description: Name of the placement
                                        type: string
                                      namespace:
                                        description: Namespace of the placement
                                        type: string
                              type:
                                description: "Type is the type of the rollout strategy, it supports UpdateAll, RollingUpdate and RollingUpdateWithCanary: - UpdateAll: when configs change, apply the new configs to all the selected clusters at once.   This is the default strategy. - RollingUpdate: when configs change, apply the new configs to all the selected clusters with   the concurrence rate defined in MaxConcurrentlyUpdating. - RollingUpdateWithCanary: when configs change, wait and check if add-ons on the canary placement   selected clusters have applied the new configs and are healthy, then apply the new configs to   all the selected clusters with the concurrence rate defined in MaxConcurrentlyUpdating. \n   The field lastKnownGoodConfigSpecHash in the status record the last successfully applied   spec hash of canary placement. If the config spec hash changes after the canary is passed and   before the rollout is done, the current rollout will continue, then roll out to the latest change. \n   For example, the addon configs have spec hash A. The canary is passed and the lastKnownGoodConfigSpecHash   would be A, and all the selected clusters are rolling out to A.   Then the config spec hash changes to B. At this time, the clusters will continue rolling out to A.   When the rollout is done and canary passed B, the lastKnownGoodConfigSpecHash would be B and   all the clusters will start rolling out to B. \n   The canary placement does not have to be a subset of the install placement, and it is more like a   reference for finding and checking canary clusters before upgrading all. To trigger the rollout   on the canary clusters, you can define another rollout strategy with the type RollingUpdate, or even   manually upgrade the addons on those clusters."
                                type: string
                                default: UpdateAll
                                enum:
                                  - UpdateAll
                                  - RollingUpdate
                                  - RollingUpdateWithCanary
                    type:
                      description: 'Type is the type of the install strategy, it can be: - Manual: no automatic install - Placements: install to clusters selected by placements.'
                      type: string
                      default: Manual
                      enum:
                        - Manual
                        - Placements
                supportedConfigs:
                  description: 'Deprecated: move supportedConfigs to ManagedClusterAddOnStatus. supportedConfigs is a list of configuration types supported by add-on. An empty list means the add-on does not require configurations. The default is an empty list'
                  type: array
                  items:
                    description: ConfigMeta represents a collection of metadata information for add-on configuration.
                    type: object
                    required:
                      - resource
                    properties:
                      defaultConfig:
                        description: defaultConfig represents the namespace and name of the default add-on configuration. In scenario where all add-ons have a same configuration.
                        type: object
                        required:
                          - name
                        properties:
                          name:
                            description: name of the add-on configuration.
                            type: string
                            minLength: 1
                          namespace:
                            description: namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.
                            type: string
                      group:
                        description: group of the add-on configuration.
                        type: string
                        default: ""
                      resource:
                        description: resource of the add-on configuration.
                        type: string
                        minLength: 1
                  x-kubernetes-list-map-keys:
                    - group
                    - resource
                  x-kubernetes-list-type: map
            status:
              description: status represents the current status of cluster management add-on.
              type: object
              properties:
                installProgression:
                  description: configReferences is a list of current add-on configuration references per placement.
                  type: array
                  items:
                    type: object
                    properties:
                      conditions:
                        description: conditions describe the state of the managed and monitored components for the operator.
                        type: array
                        items:
                          description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                          type: object
                          required:
                            - lastTransitionTime
                            - message
                            - reason
                            - status
                            - type
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                              type: string
                              format: date-time
                            message:
                              description: message is a human readable message indicating details about the transition. This may be an empty string.
                              type: string
                              maxLength: 32768
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                              type: integer
                              format: int64
                              minimum: 0
                            reason:
                              description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                              type: string
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              type: string
                              enum:
                                - "True"
                                - "False"
                                - Unknown
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              type: string
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      configReferences:
                        description: configReferences is a list of current add-on configuration references.
                        type: array
                        items:
                          description: InstallConfigReference is a reference to the current add-on configuration. This resource is used to record the configuration resource for the current add-on.
                          type: object
                          required:
                            - name
                            - resource
                          properties:
                            desiredConfigSpecHash:
                              description: desiredConfigSpecHash record the desired config spec hash.
                              type: string
                            group:
                              description: group of the add-on configuration.
                              type: string
                              default: ""
                            lastAppliedConfigSpecHash:
                              description: lastAppliedConfigSpecHash record the config spec hash when the all the corresponding ManagedClusterAddOn are applied successfully.
                              type: string
                            lastKnownGoodConfigSpecHash:
                              description: lastKnownGoodConfigSpecHash record the last known good config spec hash. For fresh install or rollout with type UpdateAll or RollingUpdate, the lastKnownGoodConfigSpecHash is the same as lastAppliedConfigSpecHash. For rollout with type RollingUpdateWithCanary, the lastKnownGoodConfigSpecHash is the last successfully applied config spec hash of the canary placement.
                              type: string
                            name:
                              description: name of the add-on configuration.
                              type: string
                              minLength: 1
                            namespace:
                              description: namespace of the add-on configuration. If this field is not set, the configuration is in the cluster scope.
                              type: string
                            resource:
                              description: resource of the add-on configuration.
                              type: string
                              minLength: 1
                      placement:
                        description: Placement reference.
                        type: object
                        required:
                          - name
                          - namespace
                        properties:
                          name:
                            description: Name of the placement
                            type: string
                          namespace:
                            description: Namespace of the placement
                            type: string
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
